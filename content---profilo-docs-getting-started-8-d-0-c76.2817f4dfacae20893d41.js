(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{48:function(e,t,r){"use strict";r.r(t),r.d(t,"frontMatter",(function(){return o})),r.d(t,"rightToc",(function(){return l})),r.d(t,"default",(function(){return p}));r(0);var n=r(60);function a(){return(a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e}).apply(this,arguments)}function i(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var o={id:"getting-started",title:"Getting Started",sidebar_label:"Getting Started"},l=[{value:"Use a prebuilt .aar with Gradle",id:"use-a-prebuilt-aar-with-gradle",children:[]},{value:"Start and stop a traces",id:"start-and-stop-a-traces",children:[]},{value:"Building from source",id:"building-from-source",children:[]}],c={rightToc:l},b="wrapper";function p(e){var t=e.components,r=i(e,["components"]);return Object(n.b)(b,a({},c,r,{components:t,mdxType:"MDXLayout"}),Object(n.b)("h2",{id:"use-a-prebuilt-aar-with-gradle"},"Use a prebuilt ",Object(n.b)("inlineCode",{parentName:"h2"},".aar")," with Gradle"),Object(n.b)("ol",null,Object(n.b)("li",{parentName:"ol"},Object(n.b)("p",{parentName:"li"},"Download a prebuilt ",Object(n.b)("inlineCode",{parentName:"p"},".aar")," from the Releases tab above."),Object(n.b)("p",{parentName:"li"},"1.1. Every commit that has a successful CI build will produce a GitHub Release."),Object(n.b)("p",{parentName:"li"},"1.2. At this point in time, we don't version the library explicitly but this will change in the near future.")),Object(n.b)("li",{parentName:"ol"},Object(n.b)("p",{parentName:"li"},"Add ",Object(n.b)("inlineCode",{parentName:"p"},"profilo.aar")," to a ",Object(n.b)("inlineCode",{parentName:"p"},"libs/")," folder under your project.")),Object(n.b)("li",{parentName:"ol"},Object(n.b)("p",{parentName:"li"},"Ensure your ",Object(n.b)("inlineCode",{parentName:"p"},"build.gradle")," contains the following clause, inside ",Object(n.b)("inlineCode",{parentName:"p"},"dependencies"),":"))),Object(n.b)("pre",null,Object(n.b)("code",a({parentName:"pre"},{}),"implementation fileTree(dir: 'libs', include: ['*.jar', '*.aar'])\n")),Object(n.b)("p",null,Object(n.b)("strong",{parentName:"p"},"NOTE"),": We are actively working on providing a Gradle-native build and Maven Central artifacts. The GitHub Releases of ",Object(n.b)("inlineCode",{parentName:"p"},".aar"),"s will stop at that point."),Object(n.b)("h2",{id:"start-and-stop-a-traces"},"Start and stop a traces"),Object(n.b)("p",null,"First, we need to initialize the library by specifying which controllers and providers we'd like to use. (see ",Object(n.b)("a",a({parentName:"p"},{href:"/profilo/docs/architecture"}),"Architecture")," for details)."),Object(n.b)("p",null,"This is best done inside your Application object, for example in ",Object(n.b)("inlineCode",{parentName:"p"},"onCreate"),"."),Object(n.b)("pre",null,Object(n.b)("code",a({parentName:"pre"},{className:"language-java"}),"try {\n  // SoLoader is a robust native code loading library.\n  SoLoader.init(this.getApplicationContext(), 0);\n} catch (IOException e) {\n  throw new RuntimeException(e);\n}\n\nSparseArray<TraceController> controllers = new SparseArray<>(1);\n\n// We want the \"ExternalController\" with the id specified by TRIGGER_EXTERNAL.\ncontrollers.put(ExternalController.TRIGGER_EXTERNAL, new ExternalController());\n\nBaseTraceProvider[] providers = new BaseTraceProvider[] {\n    new SystemCounterThread(),\n    new StackFrameThread(context),\n    new SystraceProvider(),\n    new ThreadMetadataProvider(),\n};\n\nTraceOrchestrator.initialize(\n    this.getApplicationContext(),\n    /* configProvider */ null,  // we won't be using the remote configurability in this example\n    TraceOrchestrator.MAIN_PROCESS_NAME,\n    /* isMainProcess */ true,\n    providers,\n    controllers);\n\n// Optional, will get called when there's a trace\n// to be uploaded from this app. Without it, traces\n// will be rotated and kept on device.\nTraceOrchestrator\n  .get()\n  .setBackgroundUploadService(new MyUploadService());\n")),Object(n.b)("p",null,"Once the library is initialized, we can make start/stop trace requests via ",Object(n.b)("inlineCode",{parentName:"p"},"ExternalTraceControl"),":"),Object(n.b)("pre",null,Object(n.b)("code",a({parentName:"pre"},{className:"language-java"}),"ExternalTraceControl.startTrace(\n    StackFrameThread.PROVIDER_STACK_FRAME\n    | SystemCounterThread.PROVIDER_SYSTEM_COUNTERS\n    | SystraceProvider.PROVIDER_ATRACE,\n    /*cpuSamplingRateMs*/ 10);\n/* some time later */\nExternalTraceControl.stopTrace();\n")),Object(n.b)("p",null,"To learn more about controllers, providers and configuration, see ",Object(n.b)("a",a({parentName:"p"},{href:"/profilo/docs/architecture"}),"Architecture"),"."),Object(n.b)("h2",{id:"building-from-source"},"Building from source"),Object(n.b)("p",null,"Profilo currently builds via ",Object(n.b)("a",a({parentName:"p"},{href:"https://buckbuild.com"}),"buck"),". This is necessary due to a large dependency graph and a non-trivial amount of native code."),Object(n.b)("p",null,"The build is made slightly easier by ",Object(n.b)("inlineCode",{parentName:"p"},"build/Dockerfile"),"."),Object(n.b)("p",null,"The following steps closely resemble the Travis CI setup:"),Object(n.b)("pre",null,Object(n.b)("code",a({parentName:"pre"},{}),"# Build a docker image with Android toolchains and buck checked out and compiled and the repository copied into the image\ndocker build -t profilo:16.10 -f build/Dockerfile .\n\n# Build profilo by invoking buck\ndocker run -t profilo:16.10 /usr/bin/env TERM=dumb bash /repo/build/build.sh\n\n# Copy artifacts from the last container to run to the host\nbuild/copy_artifacts_to_host.sh\n\n# List artifacts\nls out/*\n")),Object(n.b)("p",null,"TODO:"),Object(n.b)("ul",null,Object(n.b)("li",{parentName:"ul"},"Migrate build to Gradle + Maven Central artifacts"),Object(n.b)("li",{parentName:"ul"},"Run tests in CI")))}p.isMDXComponent=!0}}]);