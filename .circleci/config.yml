aliases:
  - &filter-only-master
    branches:
      only:
        - master

  - &restore-cache
    restore_cache:
      keys:
      - dependencies-{{ .Branch }}-{{ checksum "website/yarn.lock" }}
      # fallback to using the latest cache if no exact match is found
      - dependencies-{{ .Branch }}-


version: 2
jobs:
  build-website:
    docker:
      - image: circleci/node:9.11

    working_directory: ~/profilo

    steps:
      - checkout
      - *restore-cache

      # Download and cache dependencies

      - run:
          name: Install Docusaurus
          command: |
            cd website
            yarn --non-interactive --cache-folder ~/.cache/yarn

      - save_cache:
          paths:
            - website/node_modules
            - ~/.cache/yarn
          key: dependencies-{{ .Branch }}-{{ checksum "website/yarn.lock" }}

      - run:
          name: Build website
          command: |
            cd website
            yarn --non-interactive --cache-folder ~/.cache/yarn build

      - persist_to_workspace:
          root: website
          paths:
            - "*/*"

  deploy-website:
    docker:
      - image: circleci/node:9.11

    working_directory: ~/profilo

    steps:
      - checkout
      - *restore-cache
      - attach_workspace:
          at: website

      - run:
          name: Configure GitHub Bot
          command: |
            git config --global user.email "docusaurus-bot@users.noreply.github.com"
            git config --global user.name "Website Deployment Script"
            echo "machine github.com login docusaurus-bot password $GITHUB_TOKEN" > ~/.netrc

      - deploy:
          name: Deploy Website
          command: |
            echo "Deploying website..."
            cd website
            GIT_USER=docusaurus-bot USE_SSH= yarn run deploy

  build-and-test:
    docker:
      - image: cimg/base:2020.01

    working_directory: ~/profilo

    steps:
      - checkout
      - setup_remote_docker:
          version: 19.03.13

      - run:
          name: Install dependencies
          command: |
            sudo apt update --yes
            sudo apt-get install docker-ce docker-ce-cli containerd.io --yes
            sudo apt install golang --yes
      - run:
          name: Build application Docker image
          command: |
            docker build -t profilo -f build/Dockerfile .
      - run:
          name: Run tests on Docker
          command: |
            docker run -t profilo /usr/bin/env TERM=dumb bash /repo/build/test.sh
            docker run -t profilo /usr/bin/env TERM=dumb bash /repo/build/build.sh
            build/copy_artifacts_to_host.sh
      - run:
          name: "Publish Release on GitHub"
          command: |
            export GOPATH="$HOME/go"
            PATH="$GOPATH/bin:$PATH"
            go get -u github.com/tcnksm/ghr
            TAG_NAME="release-$(git rev-parse --short ${CIRCLE_SHA1})"
            set -x;
            ghr -t "${KEVIN_GITHUB_TOKEN}" -u ${CIRCLE_PROJECT_USERNAME} -r ${CIRCLE_PROJECT_REPONAME} -c ${CIRCLE_SHA1} -delete $TAG_NAME out/
            set +x;



workflows:
  version: 2
  website_workflow:
    jobs:
      - build-website
      - deploy-website:
          filters: *filter-only-master
          requires:
            - build-website
  build_and_test:
    jobs:
      - build-and-test:
          filters: *filter-only-master
